"""
通过数据学习核数组
"""
from pystudy.nn_study.d2lzh.utils import *


print("------------卷积运算------------")
"""
图像中物体边缘的检测
构造一张 6×8的图像（即高和宽分别为6像素和8像素的图像）。它中间4列为黑（0），其余为白（1）
[[1. 1. 0. 0. 0. 0. 1. 1.]
 [1. 1. 0. 0. 0. 0. 1. 1.]
 [1. 1. 0. 0. 0. 0. 1. 1.]
 [1. 1. 0. 0. 0. 0. 1. 1.]
 [1. 1. 0. 0. 0. 0. 1. 1.]
 [1. 1. 0. 0. 0. 0. 1. 1.]]
<NDArray 6x8 @cpu(0)>
"""
X = nd.ones((6, 8))
X[:, 2:6] = 0
print(X)

"""
构造一个高和宽分别为1和2的卷积核K
算法：当它与输入做互相关运算时，如果横向相邻元素相同，输出为0；否则输出为非0
[[ 1. -1.]]
"""
K = nd.array([[1, -1]])
print(K)
"""
输入X和我们设计的卷积核K做互相关运算
将从白到黑的边缘和从黑到白的边缘分别检测成了1和-1，其余部分为0
[[ 0.  1.  0.  0.  0. -1.  0.]
 [ 0.  1.  0.  0.  0. -1.  0.]
 [ 0.  1.  0.  0.  0. -1.  0.]
 [ 0.  1.  0.  0.  0. -1.  0.]
 [ 0.  1.  0.  0.  0. -1.  0.]
 [ 0.  1.  0.  0.  0. -1.  0.]]
<NDArray 6x7 @cpu(0)>
"""
Y = corr2d(X, K)
print(Y)

print("-------------互相关运算----------------")

# 构造一个输出通道数为1（将在“多输入通道和多输出通道”一节介绍通道），核数组形状是(1, 2)的二维卷积层
conv2d = nn.Conv2D(1, kernel_size=(1, 2))
conv2d.initialize()


# 二维卷积层使用4维输入输出，格式为(样本, 通道, 高, 宽)，这里批量大小（批量中的样本数）和通道数均为1
X = X.reshape((1, 1, 6, 8))
Y = Y.reshape((1, 1, 6, 7))

for i in range(10):
    with autograd.record():
        Y_hat = conv2d(X)
        l = (Y_hat - Y) ** 2
    l.backward()
    # 简单起见，这里忽略了偏差
    conv2d.weight.data()[:] -= 3e-2 * conv2d.weight.grad()
    if (i + 1) % 2 == 0:
        print('batch %d, loss %.3f' % (i + 1, l.sum().asscalar()))

# 10次迭代后误差已经降到了一个比较小的值
# 此时打印一下最终的核数组
"""
[[ 0.9895    -0.9873705]]
<NDArray 1x2 @cpu(0)>
"""
print(conv2d.weight.data().reshape((1, 2)))