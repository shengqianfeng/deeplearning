#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
@File : regular.py
@Author : jeffsheng
@Date : 2019/11/5
@Desc : 正则表达式 Python提供re模块，包含所有正则表达式的功能
"""

"""
\d可以匹配一个数字
\w可以匹配一个字母或数字
.可以匹配任意字符
*表示任意个字符（包括0个)
+表示至少一个字符
?表示0个或1个字符
{n}表示n个字符
{n,m}表示n-m个字符
[]表示范围
[0-9a-zA-Z\_]可以匹配一个数字、字母或者下划线
[0-9a-zA-Z\_]+可以匹配至少由一个数字、字母或者下划线组成的字符串
[a-zA-Z\_][0-9a-zA-Z\_]*可以匹配由字母或下划线开头，后接任意个由一个数字、字母或者下划线组成的字符串，也就是Python合法的变量
[a-zA-Z\_][0-9a-zA-Z\_]{0, 19}更精确地限制了变量的长度是1-20个字符（前面1个字符+后面最多19个字符）
A|B可以匹配A或B
^表示行的开头，^\d表示必须以数字开头
$表示行的结束，\d$表示必须以数字结束

解读：
    \d{3}表示匹配3个数字
    \s+表示至少有一个空格
    \d{3,8}表示3-8个数字
"""

# 由于Python的字符串本身也用\转义，所以要特别注意
s = 'ABC\\-001'  # Python的字符串   应的正则表达式字符串变成： 'ABC\-001'

# 因此我们强烈建议使用Python的r前缀，就不用考虑转义的问题了
s = r'ABC\-001'  # Python的字符串   对应的正则表达式字符串不变： 'ABC\-001'


import re


"""
match()方法判断是否匹配，如果匹配成功，返回一个Match对象，否则返回None
"""
# <re.Match object; span=(0, 9), match='010-12345'>
print(re.match(r'^\d{3}\-\d{3,8}$', '010-12345'))
print(re.match(r'^\d{3}\-\d{3,8}$', '010 12345'))   # None
# test = '用户输入的字符串'
# if re.match(r'正则表达式', test):
#     print('ok')
# else:
#     print('failed')



"""
切分字符串

用正则表达式切分字符串比用固定的字符更灵活
"""
print('a b   c'.split(' '))
# ['a', 'b', '', '', 'c'] 无法识别连续的空格，需要使用正则表达式无论多少个空格都可以正常分割
print(re.split(r'\s+', 'a b   c'))  # ['a', 'b', 'c']
# 加入,试试 虽然，后有多个空格，但是也可以识别
print(re.split(r'[\s\,]+', 'a,b, c  d'))    # ['a', 'b', 'c', 'd']
# 再加入;试试  分割逗号、空格或者分号都可以
print(re.split(r'[\s\,\;]+', 'a,b;; c  d'))     # ['a', 'b', 'c', 'd']


"""
正则表达式的分组功能
注意到group(0)永远是原始字符串，group(1)、group(2)……表示第1、2、……个子串
"""
m = re.match(r'^(\d{3})-(\d{3,8})$', '010-12345')
print(m.group(0))   # 010-12345
print(m.group(1))   # 010
print(m.group(2))   # 12345

t = '19:05:30'
m = re.match(r'^(0[0-9]|1[0-9]|2[0-3]|[0-9])\:(0[0-9]|1[0-9]|2[0-9]|3[0-9]|4[0-9]|5[0-9]|[0-9])\:(0[0-9]|1[0-9]|2[0-9]|3[0-9]|4[0-9]|5[0-9]|[0-9])$',t)
print(m.group())    # 19:05:30


"""
贪婪匹配

最后需要特别指出的是，正则匹配默认是贪婪匹配，也就是匹配尽可能多的字符
"""
print(re.match(r'^(\d+)(0*)$', '102300').groups())  # ('102300', '')
# 由于\d+采用贪婪匹配，直接把后面的0全部匹配了，结果0*只能匹配空字符串了
# 必须让\d+采用非贪婪匹配（也就是尽可能少匹配），才能把后面的0匹配出来,
# 加个?就可以让\d+采用非贪婪匹配
print(re.match(r'^(\d+?)(0*)$', '102300').groups())     # ('1023', '00')


"""
编译

当我们在Python中使用正则表达式时，re模块内部会干两件事情：

编译正则表达式，如果正则表达式的字符串本身不合法，会报错；

用编译后的正则表达式去匹配字符串。

如果一个正则表达式要重复使用几千次，出于效率的考虑，我们可以预编译该正则表达式，接下来重复使用时就不需要编译这个步骤了，直接匹配
"""
# 编译:
re_telephone = re.compile(r'^(\d{3})-(\d{3,8})$')

# 使用：
print(re_telephone.match('010-12345').groups())
print(re_telephone.match('010-8086').groups())

# 编译后生成Regular Expression对象，由于该对象自己包含了正则表达式，所以调用对应的方法时不用给出正则字符串。





