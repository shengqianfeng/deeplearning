#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
@File : matrix.py
@Author : jeffsheng
@Date : 2020/2/29 0029
@Desc : 
"""
import numpy as np

"""
可以使用 NumPy 中的嵌套数组来完成，这个矩阵本质上被表示成了一个二维数组
"""
print("-------numpy表示一个二维矩阵-----------")
A = np.array([[1, 2, 3],
              [0.4, -4, 2]])
"""
[[ 1.   2.   3. ]
 [ 0.4 -4.   2. ]]
"""
print(A)
# (2, 3)
# 通过矩阵 A 的 shape 属性，就获取了一个矩阵表示规模，一般采用其行数和列数来进行描述矩阵规模
print(A.shape)

print("---------方阵--------------")
# 行数和列数相等的这类矩阵，我们称之为方阵，其行数或列数称之为它的阶数
A = np.array([[1, 2, 3],
              [4, 5, 6],
              [7, 8, 9]])
"""
[[1 2 3]
 [4 5 6]
 [7 8 9]]
"""
print(A)
# (3, 3)
print(A.shape)

print("-----------矩阵转置------")
# 行列互换的矩阵操作我们称之为矩阵的转置
A = np.array([[1, 2, 3],
             [4, 5, 6]])
"""
[[1 2 3]
 [4 5 6]]
"""
print(A)
"""
[[1 4]
 [2 5]
 [3 6]]
"""
print(A.T)

"""
对称矩阵
1 如果原矩阵和转置后新得到的矩阵相等，那么这个矩阵我们就称其为对称矩阵,
2 矩阵对称的前提必须得是一个方阵，其次在方阵 S 中的每一项元素，都必须满足Sij=Sji
"""
print("----------对称矩阵-------------")
S = np.array([[1, 2, 3],
              [2, 5, 6],
              [3, 6, 9]])
"""
[[1 2 3]
 [2 5 6]
 [3 6 9]]
"""
print(S)
"""
[[1 2 3]
 [2 5 6]
 [3 6 9]]
"""
print(S.T)

print("------向量：特殊的矩阵--------------")
# n 维的行向量可以看做是 1×n 的矩阵，同理，n 维的列向量也同样可以看做是 n×1 的特殊矩阵。
# 矩阵和向量的 Python 统一表示
p = np.array([[1, 2, 3]])
# [[1 2 3]]
print(p)
"""
[[1]
 [2]
 [3]]
"""
print(p.T)


# 零矩阵：元素全 0
print("---------零矩阵-------------")
A = np.zeros([3, 5])
"""
[[0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]
 [0. 0. 0. 0. 0.]]
"""
print(A)

print("--------对角矩阵--------------")
# 非对角元素位置上全部为 0 的方阵，我们称之为对角矩阵
A = np.diag([1, 2, 3])
"""
[[1 0 0]
 [0 2 0]
 [0 0 3]]
"""
print(A)

print("---------------对角矩阵-------------")
# 对角矩阵：对角元素均为 1，其余元素均为 0 的
I = np.eye(4)
"""
[[1. 0. 0. 0.]
 [0. 1. 0. 0.]
 [0. 0. 1. 0.]
 [0. 0. 0. 1.]]
"""
print(I)

print("---------------------------矩阵的加法运算-----------------")
# 矩阵之间的加法必须运用到相等规模的两个矩阵之间，即：行数和列数相等的两个矩阵之间才能做加法运算
A = np.array([[1, 2, 3],
              [4, 5, 6]])
B = np.array([[10, 20, 30],
              [40, 50, 60]])
"""
[[11 22 33]
 [44 55 66]]
"""
print(A+B)

print("---------------------------矩阵的数量乘法--------")
A = np.array([[1, 2, 3],
              [4, 5, 6]])
"""
[[ 2  4  6]
 [ 8 10 12]]
"""
print(2*A)


print("----------------------矩阵之间的乘法------------------")
A = np.array([[1, 2],
              [3, 4],
              [5, 6]])
B = np.array([[3, 4, 5],
              [6, 7, 8]])
"""
[[15 18 21]
 [33 40 47]
 [51 62 73]]
"""
print(np.dot(A, B))


print("---------------------矩阵乘以向量的本质-----------------")
"""
 1 矩阵与向量的乘法，一般而言写作矩阵 A 在左，列向量 x 在右的 Ax 的形式。
    这种 Ax 的写法便于描述向量x的位置在矩阵 A 的作用下进行变换的过程。
 2 矩阵与向量的乘法，其实可以看作是矩阵与矩阵乘法的一种特殊形式，只不过位于后面的矩阵列数为 1 而已
"""
A = np.array([[1, 2],
              [3, 4],
              [5, 6]])
x = np.array([[4, 5]]).T
"""
几何意义：原始向量表示二维空间中的一个点，坐标为 (4,5)，经过矩阵的作用转换为空间的一个点（14,32,50）
[[14]
 [32]
 [50]]
"""
print(np.dot(A, x))
"""
矩阵的作用：在特定矩阵的乘法作用下，原空间中的向量坐标，被映射到了目标空间中的新坐标，向量的空间位置（甚至是所在空间维数）由此发生了转化。
"""

print("----------矩阵的秩----------------")

A_1 = np.array([[1, 1, 0],
              [1, 0, 1]])

A_2 = np.array([[1, 2, -1],
              [2, 4, -2]])

A_3 = np.array([[1, 0],
              [0, 1],
              [0, -1]])

A_4 = np.array([[1, 2],
              [1, 2],
              [-1, -2]])

A_5 = np.array([[1, 1, 1],
              [1, 1, 2],
              [1, 2, 3]])

print(np.linalg.matrix_rank(A_1))
print(np.linalg.matrix_rank(A_2))
print(np.linalg.matrix_rank(A_3))
print(np.linalg.matrix_rank(A_4))
print(np.linalg.matrix_rank(A_5))